buildscript {

    repositories {
        gradlePluginPortal()
    }

    dependencies {
        // def taskTreeVersion = getArtifactVersion("task-tree")
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3.1"
        //def gradleTestsetsPluginVersion = getArtifactVersion("gradle_testsets_plugin")
        // classpath "org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:2.1.1"
        // def springBootGradlePluginVersion = getArtifactVersion("spring-boot-gradle-plugin")
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.16.RELEASE"
        // def gradleGitPropertiesVersion = getArtifactVersion("gradle-git-properties")
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.0"
    }
}

repositories {
    mavenLocal()
    maven { url "https://repo.immport.org/repository/maven-public/" }
}

apply plugin: 'com.gorylenko.gradle-git-properties'  // generate file git.properties during the build
apply plugin: 'com.dorongold.task-tree'
// apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'org.springframework.boot'
apply plugin: 'java-library'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// apply from: uri(System.getProperty("user.home") + "/git/immport-configuration/gradle/buildJarArtifact.gradle").toURL()
// apply from: uri(System.getProperty("user.home") + "/git/immport-configuration/gradle/buildZipArtifact.gradle").toURL()
// apply from: uri(System.getProperty("user.home") + "/git/immport-configuration/gradle/publishZipArtifact.gradle").toURL()

// testSets {
//     integrationTest
// }

def bomVersion = "Edgware.RELEASE"

group = "org.immport.portal"
version = "1.2.7.RELEASE"

springBoot {
    backupSource = false // do not backup original jar to *.original
    buildInfo()          // generate file META-INF/build-info.properties during the build
}

configurations {
    immportDataUploadDocumentationTemplates
    immportDataUploadExamplePackages
    immportDataDownloadTool
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-jdbc'
    all*.exclude group: 'org.springframework.security', module: 'spring-security-jwt'
    all*.exclude group: 'org.springframework.security', module: 'spring-security-test'
}

dependencies {
    /*
     * Spring Boot Dependencies
     */
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-configuration-processor'     
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    runtime 'org.springframework.boot:spring-boot-devtools'


    /*
     * ImmPort Dependencies
     */
    // def immportCoreVersion = getArtifactVersion("immport-core")
    compile "org.immport.core:immport-core:1.0.16.RELEASE"
    // def immportEcosystemCoreVersion = getArtifactVersion("immport-ecosystem-core")
    compile "org.immport.ecosystem.core:immport-ecosystem-core:1.0.9.RELEASE"
    // def immportDataUploadDocumentationTemplatesVersion = getArtifactVersion("immport-data-upload-documentation-templates")
    immportDataUploadDocumentationTemplates "org.immport.data.upload.documentationtemplates:immport-data-upload-documentation-templates:3.1.9.RELEASE@zip"
    // def immportDataUploadExamplePackagesVersion = getArtifactVersion("immport-data-upload-example-packages")
    immportDataUploadExamplePackages "org.immport.data.upload.examplepackages:immport-data-upload-example-packages:3.1.9.RELEASE@zip"
    // def immportDataDownloadToolVersion = getArtifactVersion("immport-data-download-tool")
    immportDataDownloadTool "org.immport.data.download.tool:immport-data-download-tool:1.0.3.RELEASE@zip"

    /*
     * Webjar Dependencies
     */
    compile 'org.webjars:webjars-locator'
    // def classicWebjarBootstrapVersion = getArtifactVersion("bootstrap")
    compile "org.webjars:bootstrap:3.3.7"
    // def classicWebjarJqueryVersion = getArtifactVersion("jquery")
    compile "org.webjars:jquery:3.2.0"
    // def classicWebjarFontAwesomeVersion = getArtifactVersion("font-awesome")
    compile "org.webjars:font-awesome:4.7.0"
    // def classicWebjarJqueryUiVersion = getArtifactVersion("jquery-ui")
    compile "org.webjars:jquery-ui:1.12.1"
    compile 'org.webjars.bower:iframe-resizer:3.6.1'
    compile 'net.sourceforge.nekohtml:nekohtml:1.9.21'

    /*
     * Integration Test Dependencies
     */
    // integrationTestCompile ("org.springframework.boot:spring-boot-starter-test")
    // integrationTestCompile ("junit:junit")
    // integrationTestCompile 'net.sourceforge.htmlunit:htmlunit'
    // integrationTestCompile 'org.seleniumhq.selenium:selenium-java'
}

task unpackImmportDataUploadDocumentationTemplates(type: Sync) {
    dependsOn configurations.immportDataUploadDocumentationTemplates

    from { // use of closure defers evaluation until execution time
        configurations.immportDataUploadDocumentationTemplates.collect {
            zipTree(it)
        }
    }
    into "$buildDir/immport-data-upload-documentation-templates/src/main/resources/static/downloads/data/upload"
}

task unpackImmportDataUploadExamplePackages(type: Sync) {
    dependsOn configurations.immportDataUploadExamplePackages

    from { // use of closure defers evaluation until execution time
        configurations.immportDataUploadExamplePackages.collect {
            zipTree(it)
        }
    }
    into "$buildDir/immport-data-upload-example-packages/src/main/resources/static/downloads/data/upload"
    include "packages/**"
}

task unpackImmportDataDownloadTool(type: Sync) {
    dependsOn configurations.immportDataDownloadTool

    from { // use of closure defers evaluation until execution time
        configurations.immportDataDownloadTool
    }
    into "$buildDir/immport-data-download-tool/src/main/resources/static/downloads/data/download/tool"
    def immportDataDownloadToolVersion = "1.0.3.RELEASE"
    rename { String fileName ->
            fileName.replace("-$immportDataDownloadToolVersion", "")
    }
}

jar {
    from {
        [ "$buildDir/immport-data-upload-documentation-templates/src/main/resources", "$buildDir/immport-data-upload-example-packages/src/main/resources", "$buildDir/immport-data-download-tool/src/main/resources" ]
    }
}

jar.dependsOn = [ classes, unpackImmportDataUploadDocumentationTemplates, unpackImmportDataUploadExamplePackages, unpackImmportDataDownloadTool ]

// integrationTest {
//     /*
//      * Activate the 'integration-test' profile
//      */
//     systemProperties 'spring.profiles.active': 'integration-test'

//     /*
//      * Configure Gradle to print messages sent to stdout and stderr
//      */
//     testLogging {
//         showStandardStreams = true
//     }
// }


gitProperties {
    customProperty 'project_version', { project.version } // closure
}
